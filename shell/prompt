#!/bin/bash

default_username=$(whoami)

if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

function set_prompts() {
  local black="" blue="" bold="" cyan="" green="" orange="" \
    purple="" red="" reset="" white="" yellow=""

  local dateCmd=""

  if [ -x /usr/bin/tput ] && tput setaf 1 &>/dev/null; then
    tput sgr0 # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Based on the material colors
    black=$(tput setaf 0)
    blue=$(tput setaf 81)
    cyan=$(tput setaf 97)
    green=$(tput setaf 114)
    orange=$(tput setaf 215)
    purple=$(tput setaf 141)
    red=$(tput setaf 203)
    violet=$(tput setaf 206)
    magenta=$(tput setaf 206)
    white=$(tput setaf 145)
    yellow=$(tput setaf 226)
  else
    bold=""
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    magenta="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
  fi

  # Only show username/host if not default
  function usernamehost() {
    # Highlight the user name when logged in as root.
    if [[ "${USER}" == *"root" ]]; then
      userStyle="${red}"
    else
      userStyle="${orange}"
    fi

    userhost=""
    userhost+="\[${userStyle}\]$USER "
    userhost+="\[${white}\]at "
    userhost+="\[${violet}\]$HOSTNAME "
    userhost+="\[${white}\]in"

    if [ $USER != "$default_username" ]; then echo $userhost ""; fi
  }

  function prompt_git() {
    local s=''
    local branchName=''

    # Check if the current directory is in a Git repository.
    if [ $(
      git rev-parse --is-inside-work-tree &>/dev/null
      echo "${?}"
    ) == '0' ]; then

      # check if the current directory is in .git before running git checks
      if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" == 'false' ]; then

        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null

        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
          s+='+'
        fi

        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
          s+='!'
        fi

        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
          s+='?'
        fi

        # Check for stashed files.
        if $(git rev-parse --verify refs/stash &>/dev/null); then
          s+='$'
        fi
      fi

      # Get the short symbolic ref.
      # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
      # Otherwise, just give up.
      branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
        git rev-parse --short HEAD 2>/dev/null ||
        echo '(unknown)')"
      [ -n "${s}" ] && s="(${s})"
      echo -e " ${1}${branchName}${2}${s}"
    else
      return
    fi
  }

  PS1="\[\033]0;\W\007\]" # terminal title
  PS1+="\n"
  PS1+="\[$(usernamehost)\]"       # username at host
  PS1+="\[$reset$blue\]\w"         # working directory
  PS1+="\$(prompt_git \"$white\")" # git repository details
  PS1+="\n"
  PS1+="\[$reset$bold$magenta\]❯ \[$reset\]"
  export PS1

  PS2="\[${yellow}\]⚡ \[${reset}\]"
  export PS2
}

set_prompts
unset set_prompts
